;
; Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
; DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
;
; This code is free software; you can redistribute it and/or modify it
; under the terms of the GNU General Public License version 2 only, as
; published by the Free Software Foundation.  Oracle designates this
; particular file as subject to the "Classpath" exception as provided
; by Oracle in the LICENSE file that accompanied this code.
;
; This code is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; version 2 for more details (a copy is included in the LICENSE file that
; accompanied this code).
;
; You should have received a copy of the GNU General Public License version
; 2 along with this work; if not, write to the Free Software Foundation,
; Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
;
; Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
; or visit www.oracle.com if you need additional information or have any
; questions.
;

[jvm.safepoints]
label = "Safepoints"
table = "COLUMN  'Start Time', 'Duration',
                   'State Syncronization', 'Cleanup',
                   'JNI Critical Threads', 'Total Threads'
         SELECT    B.startTime,  DIFF([B|E].startTime),
                   S.duration, C.duration,
                   jniCriticalThreadCount, totalThreadCount
         FROM SafepointBegin AS B, SafepointEnd AS E,
              SafepointCleanup AS C, SafepointStateSynchronization AS S
         GROUP BY safepointId ORDER BY B.startTime"

[jvm.longest-compilations]
label = "Longest Compilations"
table = "SELECT startTime, duration AS D, method, compileLevel, succeded
         FROM Compilation ORDER BY D LIMIT 25"

[application.longest-class-loading]
label = "Longest Class Loading"
table = "COLUMN 'Time', 'Loaded Class', 'Load Time'
         SELECT startTime,loadedClass, duration AS D
         FROM ClassLoad ORDER BY D DESC LIMIT 25"

[environment.system-properties]
label = "System Properties at Startup"
table = "FORMAT none, cell-height:25
        SELECT key AS K, value FROM InitialSystemProperty GROUP BY key ORDER by K"

[application.socket-writes-by-host]
label = "Socket Writes by Host"
table = "COLUMN 'Host', 'Writes', 'Total Written'
         FORMAT cell-height:2, none, none
         SELECT host, COUNT(*), SUM(bytesWritten) AS S FROM SocketWrite
         GROUP BY host ORDER BY S DESC"

[application.socket-reads-by-host]
label = "Socket Reads by Host"
table = "COLUMN 'Host', 'Reads', 'Total Read'
         FORMAT cell-height:2, none, none
         SELECT host, COUNT(*), SUM(bytesRead) AS S FROM SocketRead
         GROUP BY host ORDER BY S DESC"

[environment.system-information]
label = "System Information"
form = "COLUMN 'Total Physical Memory Size', 'OS Version', 'CPU Type',
                 'Number of Cores', 'Number of Hardware Threads',
                 'Number of Sockets', 'CPU Description'
        SELECT LAST(totalSize), LAST(osVersion), LAST(cpu),
               LAST(cores), LAST(hwThreads),
               LAST(sockets), LAST(description)
        FROM CPUInformation, PhysicalMemory, OSInformation"

[environment.system-processes]
label = "System Processes"
table = "COLUMN 'First Observed', 'Last Observed', 'PID', 'Command Line'
         SELECT FIRST(startTime), LAST(startTime),
                FIRST(pid), FIRST(commandLine)
         FROM SystemProcess GROUP BY pid"

[jvm.tlabs]
label = "Thread Local Allocation Buffers"
form = "COLUMN 'Inside TLAB Count', 'Inside TLAB Minimum Size', 'Inside TLAB Average Size',
               'Inside TLAB Maximum Size', 'Inside TLAB Total Allocation',
               'Outside TLAB Count',  'OutSide TLAB Minimum Size', 'Outside TLAB Average Size',
               'Outside TLAB Maximum Size', 'Outside TLAB Total Allocation'
        SELECT  COUNT(I.tlabSize), MIN(I.tlabSize), AVG(I.tlabSize),
                MAX(I.tlabSize), SUM(I.tlabSize),
                COUNT(O.allocationSize), MIN(O.allocationSize), AVG(O.allocationSize),
                MAX(O.allocationSize), SUM(O.allocationSize)
        FROM ObjectAllocationInNewTLAB AS I, ObjectAllocationOutsideTLAB AS O"

[application.thread-allocation]
label = "Thread Allocation Statistics"
table = "COLUMN 'Thread', 'Allocated', 'Percentage'
         FORMAT none, none, normalized
         SELECT thread, LAST(allocated), LAST(allocated) AS A FROM ThreadAllocationStatistics
         GROUP BY thread ORDER BY A DESC"

[application.thread-cpu-load]
label = "Thread CPU Load"
table = "COLUMN 'Thread', 'System', 'User'
         SELECT eventThread AS E, LAST(system), LAST(user) AS U
         FROM ThreadCPULoad GROUP BY E ORDER BY U DESC"

[application.thread-start]
label = "Platform Thread Start by Method"
table = "COLUMN 'Start Time','Stack Trace', 'Thread', 'Duration'
         SELECT S.startTime, S.stackTrace, eventThread, DIFF(startTime) AS D
         FROM ThreadStart AS S, ThreadEnd AS E GROUP
         by eventThread ORDER BY D DESC"

[jvm.vm-operations]
label = "VM Operations"
table = "COLUMN 'VM Operation', 'Average Duration', 'Longest Duration', 'Count' , 'Total Duration'
         SELECT operation,  AVG(duration), MAX(duration), COUNT(*), SUM(duration)
         FROM jdk.ExecuteVMOperation GROUP BY operation"